#version 410
in vec2 pos;
out vec4 fragColor;

uniform sampler2D colormap;
uniform sampler2D ssaomap;
uniform sampler2D normalmap;
uniform sampler2D positionmap;

uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform vec3 backgroundColor;
uniform float sunIntensity;

uniform int numLights;
uniform vec3 lightPositions[100];
uniform vec3 lightColours[100];

#include shadows.shd;

vec3 get_lighting(vec3 position, vec3 norm)
{
  float ambient_strength = 0.1;
  float ambient_occlusion = 1-0.8*(1-texture(ssaomap, pos).r);
  ambient_strength *= ambient_occlusion;

  float shadow_amount = get_total_shadow_amount(vec4(position,1));

  vec3 diffuse = vec3(max(0,dot(norm, sunDirection)) * sunIntensity);

  vec3 halfway = normalize(
      normalize(sunDirection) + normalize(CameraPosition.xyz - position));
  vec3 specular = vec3(pow(max(0,dot(halfway, norm)), 100))*sunIntensity;

  for (int i = 0; i< numLights; ++i)
  {
    vec3 intensity = lightColours[i] / (1+pow(length(position - lightPositions[i]),2));
    vec3 halfway = normalize(
        normalize(lightPositions[i] - position) + normalize(CameraPosition.xyz - position));
    specular += pow(max(0,dot(halfway, norm)), 100) * intensity;

    diffuse += intensity * clamp(dot(norm,normalize(lightPositions[i] - position)),0,1);
  }

  return max(vec3(0),ambient_strength + 0.4*(diffuse+specular)*(1-shadow_amount));
}

void main()
{
  fragColor.a = 1;

  vec3 normal = texture(normalmap,pos).xyz;
  vec3 position = texture(positionmap,pos).xyz;
  if (length(normal)<0.001)
  {
    fragColor.rgb = backgroundColor;
    return;
  }
  fragColor.rgb = texture(colormap,pos).xyz*get_lighting(position, normal);
}
